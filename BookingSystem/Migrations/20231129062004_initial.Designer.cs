// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace BookingSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231129062004_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookingSystem.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"), 1L, 1);

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClassScheduleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("ClassScheduleID");

                    b.HasIndex("UserID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BookingSystem.Models.ClassSchedule", b =>
                {
                    b.Property<int>("ClassScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassScheduleID"), 1L, 1);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaximumCapacity")
                        .HasColumnType("int");

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<bool?>("RefundDone")
                        .HasColumnType("bit");

                    b.Property<int>("RequiredCredits")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassScheduleID");

                    b.HasIndex("PackageID");

                    b.ToTable("ClassSchedules");

                    b.HasData(
                        new
                        {
                            ClassScheduleID = 1,
                            ClassName = "Yoga Class SG",
                            Country = "SG",
                            EndTime = new DateTime(2023, 11, 30, 16, 20, 4, 423, DateTimeKind.Utc).AddTicks(6857),
                            MaximumCapacity = 10,
                            RequiredCredits = 1,
                            StartTime = new DateTime(2023, 11, 30, 15, 20, 4, 423, DateTimeKind.Utc).AddTicks(6852)
                        },
                        new
                        {
                            ClassScheduleID = 2,
                            ClassName = "Zumba Class MY 1",
                            Country = "MM",
                            EndTime = new DateTime(2023, 11, 30, 16, 20, 4, 423, DateTimeKind.Utc).AddTicks(6861),
                            MaximumCapacity = 2,
                            RequiredCredits = 2,
                            StartTime = new DateTime(2023, 11, 30, 15, 20, 4, 423, DateTimeKind.Utc).AddTicks(6860)
                        },
                        new
                        {
                            ClassScheduleID = 3,
                            ClassName = "Zumba Class MY 2",
                            Country = "MY",
                            EndTime = new DateTime(2023, 11, 30, 13, 20, 4, 423, DateTimeKind.Utc).AddTicks(6863),
                            MaximumCapacity = 4,
                            RequiredCredits = 2,
                            StartTime = new DateTime(2023, 11, 30, 12, 20, 4, 423, DateTimeKind.Utc).AddTicks(6863)
                        },
                        new
                        {
                            ClassScheduleID = 4,
                            ClassName = "Zumba Class MY 3",
                            Country = "SG",
                            EndTime = new DateTime(2023, 11, 30, 11, 20, 4, 423, DateTimeKind.Utc).AddTicks(6866),
                            MaximumCapacity = 5,
                            RequiredCredits = 3,
                            StartTime = new DateTime(2023, 11, 30, 11, 20, 4, 423, DateTimeKind.Utc).AddTicks(6865)
                        },
                        new
                        {
                            ClassScheduleID = 5,
                            ClassName = "Zumba Class MY 4",
                            Country = "MM",
                            EndTime = new DateTime(2023, 11, 30, 10, 20, 4, 423, DateTimeKind.Utc).AddTicks(6868),
                            MaximumCapacity = 6,
                            RequiredCredits = 1,
                            StartTime = new DateTime(2023, 11, 30, 10, 20, 4, 423, DateTimeKind.Utc).AddTicks(6867)
                        },
                        new
                        {
                            ClassScheduleID = 6,
                            ClassName = "Zumba Class MY 5",
                            Country = "MY",
                            EndTime = new DateTime(2023, 11, 30, 9, 20, 4, 423, DateTimeKind.Utc).AddTicks(6870),
                            MaximumCapacity = 7,
                            RequiredCredits = 2,
                            StartTime = new DateTime(2023, 11, 30, 8, 20, 4, 423, DateTimeKind.Utc).AddTicks(6869)
                        });
                });

            modelBuilder.Entity("BookingSystem.Models.Package", b =>
                {
                    b.Property<int>("PackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageID"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PackageID");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            PackageID = 1,
                            Country = "SG",
                            Credits = 5,
                            ExpiryDate = new DateTime(2024, 1, 29, 6, 20, 4, 423, DateTimeKind.Utc).AddTicks(6820),
                            Name = "Basic Package SG",
                            Price = 10.99m
                        },
                        new
                        {
                            PackageID = 2,
                            Country = "MY",
                            Credits = 10,
                            ExpiryDate = new DateTime(2024, 2, 29, 6, 20, 4, 423, DateTimeKind.Utc).AddTicks(6831),
                            Name = "Premium Package MY",
                            Price = 29.99m
                        },
                        new
                        {
                            PackageID = 3,
                            Country = "MM",
                            Credits = 7,
                            ExpiryDate = new DateTime(2024, 1, 29, 6, 20, 4, 423, DateTimeKind.Utc).AddTicks(6833),
                            Name = "Basic Package MM",
                            Price = 15.99m
                        });
                });

            modelBuilder.Entity("BookingSystem.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "user1@example.com",
                            IsEmailVerified = true,
                            Password = "hashed_password",
                            Username = "user1"
                        },
                        new
                        {
                            UserID = 2,
                            Email = "user2@example.com",
                            IsEmailVerified = true,
                            Password = "hashed_password",
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("BookingSystem.Models.UserPackage", b =>
                {
                    b.Property<int>("UserPackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPackageID"), 1L, 1);

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RemainingCredits")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserPackageID");

                    b.HasIndex("PackageID");

                    b.HasIndex("UserID");

                    b.ToTable("UserPackages");
                });

            modelBuilder.Entity("BookingSystem.Models.Waitlist", b =>
                {
                    b.Property<int>("WaitlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WaitlistId"), 1L, 1);

                    b.Property<int>("ClassScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WaitlistTime")
                        .HasColumnType("datetime2");

                    b.HasKey("WaitlistId");

                    b.HasIndex("ClassScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("Waitlists");
                });

            modelBuilder.Entity("BookingSystem.Models.Booking", b =>
                {
                    b.HasOne("BookingSystem.Models.ClassSchedule", "ClassSchedule")
                        .WithMany("Bookings")
                        .HasForeignKey("ClassScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingSystem.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSchedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSystem.Models.ClassSchedule", b =>
                {
                    b.HasOne("BookingSystem.Models.Package", "Package")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("PackageID");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("BookingSystem.Models.UserPackage", b =>
                {
                    b.HasOne("BookingSystem.Models.Package", "Package")
                        .WithMany("UserPackages")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingSystem.Models.User", "User")
                        .WithMany("UserPackages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSystem.Models.Waitlist", b =>
                {
                    b.HasOne("BookingSystem.Models.ClassSchedule", "ClassSchedule")
                        .WithMany("Waitlists")
                        .HasForeignKey("ClassScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSchedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingSystem.Models.ClassSchedule", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Waitlists");
                });

            modelBuilder.Entity("BookingSystem.Models.Package", b =>
                {
                    b.Navigation("ClassSchedules");

                    b.Navigation("UserPackages");
                });

            modelBuilder.Entity("BookingSystem.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("UserPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
